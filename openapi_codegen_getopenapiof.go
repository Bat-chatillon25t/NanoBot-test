// Code generated by codegen/getopenapiof. DO NOT EDIT.

package nano

import (
	"unsafe"

	"github.com/pkg/errors"
)

func (bot *Bot) getOpenAPIofShardWSSGateway(ep string) (*ShardWSSGateway, error) {
	resp := &struct {
		CodeMessageBase
		ShardWSSGateway
	}{}
	err := bot.GetOpenAPI(ep, resp)
	if err != nil {
		err = errors.Wrap(err, getCallerFuncName())
		return nil, err
	}
	return (*ShardWSSGateway)(unsafe.Add(unsafe.Pointer(resp), unsafe.Sizeof(CodeMessageBase{}))), nil
}

func (bot *Bot) getOpenAPIofUser(ep string) (*User, error) {
	resp := &struct {
		CodeMessageBase
		User
	}{}
	err := bot.GetOpenAPI(ep, resp)
	if err != nil {
		err = errors.Wrap(err, getCallerFuncName())
		return nil, err
	}
	return (*User)(unsafe.Add(unsafe.Pointer(resp), unsafe.Sizeof(CodeMessageBase{}))), nil
}

func (bot *Bot) getOpenAPIofGuild(ep string) (*Guild, error) {
	resp := &struct {
		CodeMessageBase
		Guild
	}{}
	err := bot.GetOpenAPI(ep, resp)
	if err != nil {
		err = errors.Wrap(err, getCallerFuncName())
		return nil, err
	}
	return (*Guild)(unsafe.Add(unsafe.Pointer(resp), unsafe.Sizeof(CodeMessageBase{}))), nil
}

func (bot *Bot) getOpenAPIofGuildArray(ep string) (*GuildArray, error) {
	resp := &struct {
		CodeMessageBase
		GuildArray
	}{}
	err := bot.GetOpenAPI(ep, resp)
	if err != nil {
		err = errors.Wrap(err, getCallerFuncName())
		return nil, err
	}
	return (*GuildArray)(unsafe.Add(unsafe.Pointer(resp), unsafe.Sizeof(CodeMessageBase{}))), nil
}

func (bot *Bot) getOpenAPIofChannel(ep string) (*Channel, error) {
	resp := &struct {
		CodeMessageBase
		Channel
	}{}
	err := bot.GetOpenAPI(ep, resp)
	if err != nil {
		err = errors.Wrap(err, getCallerFuncName())
		return nil, err
	}
	return (*Channel)(unsafe.Add(unsafe.Pointer(resp), unsafe.Sizeof(CodeMessageBase{}))), nil
}

func (bot *Bot) getOpenAPIofChannelArray(ep string) (*ChannelArray, error) {
	resp := &struct {
		CodeMessageBase
		ChannelArray
	}{}
	err := bot.GetOpenAPI(ep, resp)
	if err != nil {
		err = errors.Wrap(err, getCallerFuncName())
		return nil, err
	}
	return (*ChannelArray)(unsafe.Add(unsafe.Pointer(resp), unsafe.Sizeof(CodeMessageBase{}))), nil
}
