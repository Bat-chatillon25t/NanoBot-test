// Code generated by codegen/getopenapiof. DO NOT EDIT.

package nano

import (
	"github.com/pkg/errors"
)

func (bot *Bot) getOpenAPIofShardWSSGateway(ep string) (*ShardWSSGateway, error) {
	resp := &struct {
		CodeMessageBase
		ShardWSSGateway
	}{}
	err := bot.GetOpenAPI(ep, "", resp)
	if err != nil {
		err = errors.Wrap(err, getCallerFuncName())
	}
	return &resp.ShardWSSGateway, err
}

func (bot *Bot) getOpenAPIofUser(ep string) (*User, error) {
	resp := &struct {
		CodeMessageBase
		User
	}{}
	err := bot.GetOpenAPI(ep, "", resp)
	if err != nil {
		err = errors.Wrap(err, getCallerFuncName())
	}
	return &resp.User, err
}

func (bot *Bot) getOpenAPIofGuild(ep string) (*Guild, error) {
	resp := &struct {
		CodeMessageBase
		Guild
	}{}
	err := bot.GetOpenAPI(ep, "", resp)
	if err != nil {
		err = errors.Wrap(err, getCallerFuncName())
	}
	return &resp.Guild, err
}

func (bot *Bot) getOpenAPIofChannel(ep string) (*Channel, error) {
	resp := &struct {
		CodeMessageBase
		Channel
	}{}
	err := bot.GetOpenAPI(ep, "", resp)
	if err != nil {
		err = errors.Wrap(err, getCallerFuncName())
	}
	return &resp.Channel, err
}

func (bot *Bot) getOpenAPIofMember(ep string) (*Member, error) {
	resp := &struct {
		CodeMessageBase
		Member
	}{}
	err := bot.GetOpenAPI(ep, "", resp)
	if err != nil {
		err = errors.Wrap(err, getCallerFuncName())
	}
	return &resp.Member, err
}

func (bot *Bot) getOpenAPIofRoleMembers(ep string) (*RoleMembers, error) {
	resp := &struct {
		CodeMessageBase
		RoleMembers
	}{}
	err := bot.GetOpenAPI(ep, "", resp)
	if err != nil {
		err = errors.Wrap(err, getCallerFuncName())
	}
	return &resp.RoleMembers, err
}

func (bot *Bot) getOpenAPIofGuildRoleList(ep string) (*GuildRoleList, error) {
	resp := &struct {
		CodeMessageBase
		GuildRoleList
	}{}
	err := bot.GetOpenAPI(ep, "", resp)
	if err != nil {
		err = errors.Wrap(err, getCallerFuncName())
	}
	return &resp.GuildRoleList, err
}

func (bot *Bot) getOpenAPIofChannelPermissions(ep string) (*ChannelPermissions, error) {
	resp := &struct {
		CodeMessageBase
		ChannelPermissions
	}{}
	err := bot.GetOpenAPI(ep, "", resp)
	if err != nil {
		err = errors.Wrap(err, getCallerFuncName())
	}
	return &resp.ChannelPermissions, err
}

func (bot *Bot) getOpenAPIofMessage(ep string) (*Message, error) {
	resp := &struct {
		CodeMessageBase
		Message
	}{}
	err := bot.GetOpenAPI(ep, "", resp)
	if err != nil {
		err = errors.Wrap(err, getCallerFuncName())
	}
	return &resp.Message, err
}

func (bot *Bot) getOpenAPIofMessageSetting(ep string) (*MessageSetting, error) {
	resp := &struct {
		CodeMessageBase
		MessageSetting
	}{}
	err := bot.GetOpenAPI(ep, "", resp)
	if err != nil {
		err = errors.Wrap(err, getCallerFuncName())
	}
	return &resp.MessageSetting, err
}

func (bot *Bot) getOpenAPIofPinsMessage(ep string) (*PinsMessage, error) {
	resp := &struct {
		CodeMessageBase
		PinsMessage
	}{}
	err := bot.GetOpenAPI(ep, "", resp)
	if err != nil {
		err = errors.Wrap(err, getCallerFuncName())
	}
	return &resp.PinsMessage, err
}
